# -----------------------------------------------------------------------
#    Default values for srm
# -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# ---- Cell names
#
srm.cell.name=SRM-${host.name}

#  ---- Named queues to consume from
#
#   A service can consume messages from named queues. Other services can
#   write messages to such queues. A named queue has an unqualified cell
#   address, that is, an address without a domain name.
#
#   This property contains a comma separated list of named queues to
#   consume from.
#
srm.cell.consume = ${srm.cell.name}
srm.cell.subscribe=${srm.loginbroker.request-topic}

# Cell message processing limits
(obsolete)srm.cell.limits.message.threads.max = See srm.cell.max-message-threads
(obsolete)srm.cell.limits.message.queue.max = See srm.cell.max-messages-queued

srm.cell.max-message-threads = 1
srm.cell.max-messages-queued = 1000

#  ---- TCP Port
#
#  The port SRM will listen on for GSI-based communication.  GSI is an
#  encrypted transport commonly used in grid communication.  It is
#  similar to SSL but incompatible.
#
srm.net.port = 8443

#
#  The port SRM will listen on for SSL-based communication.  SSL is an
#  industry standard encryption transport.
#
srm.net.ssl-port = 8445

#  The interface SRM will listen on.
srm.net.listen=${dcache.net.listen}

# ---- Threads that accept TCP connections
srm.limits.jetty-connector.acceptors = 1

# ---- Time before an idle TCP connection is closed
srm.limits.jetty-connector.idle-time.max = 60000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty-connector.idle-time.max.unit=MILLISECONDS

# ---- Time before an idle TCP connection is closed during high load
srm.limits.jetty-connector.low-resource.max.idle-time = 20000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty-connector.low-resource.max.idle-time.unit=MILLISECONDS

# ---- TCP backlog for SRM connections
srm.limits.jetty-connector.backlog = 2048

# ---- Maximum number of threads used for SRM request processing
#
# Whenever a client submits an SRM request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of SRM transfers that
# can be active at any given time: An SRM transfer involves several
# requests by the client (eg srmPrepareToGet, srmStatusOfGetRequest,
# srmReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not answered
# until processed. This means that a thread is bound to the request for
# the duration of the request processing. If processed asynchronous,
# the thread is released right away and the client submits new requests
# to poll for the completion of the previously submitted request. This
# adds latency and increases authentication overhead, but frees thread
# and TCP connections. See srm.request.switch-to-async-mode-delay.
#
srm.limits.jetty.threads.max = 500

# ---- Minimum number of threads used for SRM request processing
srm.limits.jetty.threads.min = 10

# ---- Time before an idle request processing thread is terminated
srm.limits.jetty.threads.idle-time.max = 30000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty.threads.idle-time.max.unit = MILLISECONDS

# ---- Maximum number of queued SRM requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
srm.limits.jetty.threads.queued.max = 500


# set graceful shutdown timeout. If set, the internal doStop() method
# will not immediately stop the server. Instead, all Connectors will
# be closed so that new connections will not be accepted and all handlers that
# implement Server.Graceful will be put into the shutdown mode so that no
# new requests will be accepted, but existing requests can complete.
# The server will then wait the configured timeout before stopping.
srm.limits.jetty.graceful-shutdown = 2000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty.graceful-shutdown.unit=MILLISECONDS


# ---- Enable legacy socket closure
#
# GSI is layered on top of the SSL/TLS protocol. SSL/TLS specifies that
# if the server wants to close the connection, it is to send an SSL
# close notification to the client. Some clients consider this notification
# a fatal error and expect the server to instead abruptly close the socket.
#
# Setting this property to true causes the server to close the socket without
# sending a close notification first. This should be enabled if compatibility
# with these clients is required.
#
(one-of?true|false)srm.enable.legacy-close = true

# ---- Cell addresses of and timeouts for other dCache services
srm.service.srmmanager = ${dcache.service.srmmanager}
srm.service.srmmanager.timeout = 3
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.service.srmmanager.timeout.unit = MINUTES

srm.service.gplazma = ${dcache.service.gplazma}
srm.service.gplazma.timeout = 30000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.service.gplazma.timeout.unit = MILLISECONDS

# gPlazma cache settings
srm.service.gplazma.cache.size = 1000
srm.service.gplazma.cache.timeout = 180
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.service.gplazma.cache.timeout.unit = SECONDS

# Topic to which to publish credential service announcements
srm.credential-service.topic = ${dcache.credential-service.topic}

# ---- Login broker publishing
#
# Be aware that modifying 'srm.loginbroker.root' property does not
# affect how corresponding srmmanager service(s) behave.  If
# 'srm.loginbroker.root' is modified then it is the admin's
# responsibility to ensure the 'srmmanager.root' property of
# corresponding srmmanager services are updated accordingly.
# Alternatively, simply configure the 'dcache.srm-root' property to
# update both properties together.
#
# SRM requests are only accepted if they involve local SURLs.  A SURL
# is considered local if there is at least one srm service with
# corresponding 'srm.loginbroker.address' and 'srm.loginbroker.port'
# values.  If the SURL has no port then only a match on the address is
# needed.  The default value should work for simply deployments, but
# sites using DNS aliases or load-balancing techniques will likely
# need to configured these values.
#
srm.loginbroker.update-topic= ${dcache.loginbroker.update-topic}
srm.loginbroker.request-topic= ${dcache.loginbroker.request-topic}
srm.loginbroker.tags= ${dcache.loginbroker.tags}
srm.loginbroker.update-period = ${dcache.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.loginbroker.update-period.unit})\
srm.loginbroker.update-period.unit = ${dcache.loginbroker.update-period.unit}
srm.loginbroker.update-threshold = ${dcache.loginbroker.update-threshold}
srm.loginbroker.version = 1.1.1
srm.loginbroker.family = srm
srm.loginbroker.root = ${dcache.srm-root}

##  This property is a space-separated list of hostnames or IP
##  addresses to publish for this door.  Hostnames are resolved to an
##  IP address on start-up, but not subsequently.  Non-wildcard IP
##  addresses are resolved to canonical name on start-up, but not
##  subsequently.  Wildcard IP addresses (0.0.0.0 or ::) are replaced
##  by a dynamically discovered list of IP addresses, based on which
##  network interfaces are "up".  These are resolved, with the
##  corresponding hostnames cached for a configurable period (see
##  'networkaddress.cache.ttl' system property).  An empty value is
##  equivalent to "0.0.0.0".
srm.loginbroker.address = ${srm.net.listen}
srm.loginbroker.port = ${srm.net.port}

# path to host certificate
srm.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host key
srm.authn.hostcert.key=${dcache.authn.hostcert.key}

# Host key refresh interval
srm.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})\
srm.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to CA directory
srm.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
srm.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})\
srm.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

# ---- Certificate Authority Namespace usage mode
(one-of?GLOBUS_EUGRIDPMA|EUGRIDPMA_GLOBUS|GLOBUS|EUGRIDPMA|GLOBUS_EUGRIDPMA_REQUIRE|EUGRIDPMA_GLOBUS_REQUIRE|GLOBUS_REQUIRE|EUGRIDPMA_REQUIRE|EUGRIDPMA_AND_GLOBUS|EUGRIDPMA_AND_GLOBUS_REQUIRE|IGNORE|${dcache.authn.namespace-mode})\
srm.authn.namespace-mode=${dcache.authn.namespace-mode}

# ---- Certificate Revocation List usage mode
(one-of?REQUIRE|IF_VALID|IGNORE|${dcache.authn.crl-mode})\
srm.authn.crl-mode=${dcache.authn.crl-mode}

# ---- On-line Certificate Status Protocol usage mode
(one-of?REQUIRE|IF_AVAILABLE|IGNORE|${dcache.authn.ocsp-mode})\
srm.authn.ocsp-mode=${dcache.authn.ocsp-mode}

# ---- GSI Delegation key pair caching lifetime
srm.authn.gsi.delegation.cache.lifetime = ${dcache.authn.gsi.delegation.cache.lifetime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.gsi.delegation.cache.lifetime.unit})\
srm.authn.gsi.delegation.cache.lifetime.unit = ${dcache.authn.gsi.delegation.cache.lifetime.unit}


#  Security related properties
srm.authn.ciphers = ${dcache.authn.ciphers}

# ---- Whether to expect the haproxy Proxy Protocol
#
# Many load balancers and reverse proxies support the Proxy Protocol, a
# de facto standard introduced by the haproxy product. Support for this
# protocol has to be enabled in both the load balancer/reverse proxy and
# the backend service.
#
# If enabled, the proxy injects the actual clients IP address into the data
# stream, thus letting the backend be aware of the clients address.
#
# Only version 1 of the proxy protocol is supported.
#
(one-of?true|false)srm.enable.proxy-protocol = false

# ---- srmClientDNSLookup
#
# Perform the lookup of the client hostname based on the client's IP
# address. The result is used in pool selection. If srmClientDNSLookup
# is set to false the client's IP address is used.
#
(one-of?true|false)srm.enable.client-dns-lookup = false

#  SRM ping ExtraInfo
#
#  The SRM 'ping' command allows the client to check that the server
#  is alive.  In addition to demonstrating the basic health of the
#  server, the response contains information as a list of key-value
#  pairs.
#
#  Sites can provide additional information by configuring properties
#  with a name that starts 'srmmanager.ping-extra-info!'.  The ExtraInfo key
#  is the property name without this prefix and the ExtraInfo value is
#  the property's value.
#
(prefix)srm.ping-extra-info = The ExtraInfo items in an srmPing response.
srm.ping-extra-info!backend_type = dCache
srm.ping-extra-info!backend_version = ${dcache.version}

#
#   Document which TCP ports are opened
#
(immutable)srm.net.ports.tcp=${srm.net.port} ${srm.net.ssl-port}



(obsolete)srm.request.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.get.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.bring-online.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.put.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.copy.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.ls.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.reserve-space.threads = See srm.request.*.max-inprogress
(obsolete)srm.request.retries=
(obsolete)srm.request.get.retries =
(obsolete)srm.request.bring-online.retries =
(obsolete)srm.request.put.retries =
(obsolete)srm.request.copy.retries =
(obsolete)srm.request.ls.retries =
(obsolete)srm.request.reserve-space.retries =
(obsolete)srm.request.retry-timeout =
(obsolete)srm.request.retry-timeout.unit =
(obsolete)srm.request.get.retry-timeout =
(obsolete)srm.request.get.retry-timeout.unit=
(obsolete)srm.request.bring-online.retry-timeout =
(obsolete)srm.request.bring-online.retry-timeout.unit=
(obsolete)srm.request.put.retry-timeout =
(obsolete)srm.request.put.retry-timeout.unit=
(obsolete)srm.request.copy.retry-timeout =
(obsolete)srm.request.copy.retry-timeout.unit=
(obsolete)srm.request.ls.retry-timeout =
(obsolete)srm.request.ls.retry-timeout.unit=
(obsolete)srm.request.reserve-space.retry-timeout =
(obsolete)srm.request.reserve-space.retry-timeout.unit=
(obsolete)srm.request.max-by-same-user =
(obsolete)srm.request.get.max-by-same-user =
(obsolete)srm.request.bring-online.max-by-same-user =
(obsolete)srm.request.put.max-by-same-user =
(obsolete)srm.request.copy.max-by-same-user =
(obsolete)srm.request.ls.max-by-same-user =
(obsolete)srm.request.reserve-space.max-by-same-user =
(obsolete)srm.service.copymanager=
(obsolete)srm.service.copymanager.timeout=
(obsolete)srm.service.copymanager.timeout.unit=
(obsolete)srm.version =
(obsolete)srm.db.host =
(obsolete)srm.db.name =
(obsolete)srm.db.user =
(obsolete)srm.db.password =
(obsolete)srm.db.password.file =
(obsolete)srm.db.url =
(obsolete)srm.db.connections.max =
(obsolete)srm.db.connections.idle =
(obsolete)srm.db.schema.auto=
(obsolete)srm.db.schema.changelog=
(obsolete)srm.limits.parallel-streams =
(obsolete)srm.limits.external-copy-script.timeout =
(obsolete)srm.limits.external-copy-script.timeout.unit =
(obsolete)srm.limits.transfer-buffer.size =
(obsolete)srm.limits.transfer-tcp-buffer.size =
(obsolete)srm.enable.external-copy-script.debug =
(obsolete)srm.request.max-requests =
(obsolete)srm.request.get.max-requests =
(obsolete)srm.request.bring-online.max-requests =
(obsolete)srm.request.put.max-requests =
(obsolete)srm.request.copy.max-requests =
(obsolete)srm.request.ls.max-requests =
(obsolete)srm.request.reserve-space.max-requests =
(obsolete)srm.request.get.max-inprogress =
(obsolete)srm.request.bring-online.max-inprogress =
(obsolete)srm.request.copy.max-inprogress =
(obsolete)srm.request.put.max-inprogress =
(obsolete)srm.request.ls.max-inprogress =
(obsolete)srm.request.reserve-space.max-inprogress =
(obsolete)srm.request.max-transfers=
(obsolete)srm.request.get.max-transfers =
(obsolete)srm.request.put.max-transfers =
(obsolete)srm.plugins.discriminator=
(obsolete)srm.plugins.scheduler =
(obsolete)srm.scheduler.inprogress-fair-share =
(obsolete)srm.scheduler.inprogress-fair-share!discriminator =
(obsolete)srm.scheduler.throughput-fair-share =
(obsolete)srm.scheduler.throughput-fair-share!discriminator =
(obsolete)srm.plugins.transfer =
(obsolete)srm.transfer.fair-share =
(obsolete)srm.transfer.fair-share!discriminator =
(obsolete)srm.transfer.first-come-first-served =
(obsolete)srm.request.switch-to-async-mode-delay =
(obsolete)srm.request.switch-to-async-mode-delay.unit=
(obsolete)srm.request.get.switch-to-async-mode-delay =
(obsolete)srm.request.get.switch-to-async-mode-delay.unit =
(obsolete)srm.request.bring-online.switch-to-async-mode-delay =
(obsolete)srm.request.bring-online.switch-to-async-mode-delay.unit=
(obsolete)srm.request.put.switch-to-async-mode-delay =
(obsolete)srm.request.put.switch-to-async-mode-delay.unit=
(obsolete)srm.request.ls.switch-to-async-mode-delay =
(obsolete)srm.request.ls.switch-to-async-mode-delay.unit=
(obsolete)srm.request.max-poll-period =
(obsolete)srm.request.max-poll-period.unit =
(obsolete)srm.request.get.max-poll-period =
(obsolete)srm.request.get.max-poll-period.unit =
(obsolete)srm.request.put.max-poll-period =
(obsolete)srm.request.put.max-poll-period.unit =
(obsolete)srm.request.bring-online.max-poll-period =
(obsolete)srm.request.bring-online.max-poll-period.unit =
(obsolete)srm.request.ls.max-poll-period =
(obsolete)srm.request.ls.max-poll-period.unit =
(obsolete)srm.request.reserve-space.max-poll-period =
(obsolete)srm.request.reserve-space.max-poll-period.unit =
(obsolete)srm.request.copy.max-poll-period =
(obsolete)srm.request.copy.max-poll-period.unit =
(obsolete)srm.persistence.enable =
(obsolete)srm.persistence.get.enable =
(obsolete)srm.persistence.bring-online.enable =
(obsolete)srm.persistence.put.enable =
(obsolete)srm.persistence.copy.enable =
(obsolete)srm.persistence.ls.enable =
(obsolete)srm.persistence.reserve-space.enable =
(obsolete)srm.persistence.enable.clean-pending-on-restart =
(obsolete)srm.persistence.get.enable.clean-pending-on-restart =
(obsolete)srm.persistence.bring-online.enable.clean-pending-on-restart =
(obsolete)srm.persistence.put.enable.clean-pending-on-restart =
(obsolete)srm.persistence.copy.enable.clean-pending-on-restart =
(obsolete)srm.persistence.ls.enable.clean-pending-on-restart =
(obsolete)srm.persistence.reserve-space.enable.clean-pending-on-restart =
(obsolete)srm.persistence.keep-history-period =
(obsolete)srm.persistence.keep-history-period.unit =
(obsolete)srm.persistence.get.keep-history-period =
(obsolete)srm.persistence.get.keep-history-period.unit=
(obsolete)srm.persistence.bring-online.keep-history-period =
(obsolete)srm.persistence.bring-online.keep-history-period.unit =
(obsolete)srm.persistence.put.keep-history-period =
(obsolete)srm.persistence.put.keep-history-period.unit =
(obsolete)srm.persistence.copy.keep-history-period =
(obsolete)srm.persistence.copy.keep-history-period.unit =
(obsolete)srm.persistence.ls.keep-history-period =
(obsolete)srm.persistence.ls.keep-history-period.unit =
(obsolete)srm.persistence.reserve-space.keep-history-period =
(obsolete)srm.persistence.reserve-space.keep-history-period.unit =
(obsolete)srm.persistence.remove-expired-period =
(obsolete)srm.persistence.remove-expired-period.unit =
(obsolete)srm.persistence.get.remove-expired-period =
(obsolete)srm.persistence.get.remove-expired-period.unit =
(obsolete)srm.persistence.bring-online.remove-expired-period =
(obsolete)srm.persistence.bring-online.remove-expired-period.unit =
(obsolete)srm.persistence.put.remove-expired-period =
(obsolete)srm.persistence.put.remove-expired-period.unit =
(obsolete)srm.persistence.copy.remove-expired-period =
(obsolete)srm.persistence.copy.remove-expired-period.unit =
(obsolete)srm.persistence.ls.remove-expired-period =
(obsolete)srm.persistence.ls.remove-expired-period.unit =
(obsolete)srm.persistence.reserve-space.remove-expired-period =
(obsolete)srm.persistence.reserve-space.remove-expired-period.unit =
(obsolete)srm.persistence.enable.history =
(obsolete)srm.persistence.get.enable.history =
(obsolete)srm.persistence.bring-online.enable.history =
(obsolete)srm.persistence.put.enable.history =
(obsolete)srm.persistence.copy.enable.history =
(obsolete)srm.persistence.ls.enable.history =
(obsolete)srm.persistence.reserve-space.enable.history =
(obsolete)srm.persistence.enable.store-transient-state =
(obsolete)srm.persistence.get.enable.store-transient-state =
(obsolete)srm.persistence.bring-online.enable.store-transient-state =
(obsolete)srm.persistence.put.enable.store-transient-state =
(obsolete)srm.persistence.copy.enable.store-transient-state =
(obsolete)srm.persistence.ls.enable.store-transient-state =
(obsolete)srm.persistence.reserve-space.enable.store-transient-state =
(obsolete)srm.limits.ls.entries =
(obsolete)srm.limits.ls.levels =
(obsolete)srm.request.lifetime =
(obsolete)srm.request.lifetime.unit =
(obsolete)srm.request.get.lifetime  =
(obsolete)srm.request.get.lifetime.unit=
(obsolete)srm.request.bring-online.lifetime =
(obsolete)srm.request.bring-online.lifetime.unit =
(obsolete)srm.request.put.lifetime =
(obsolete)srm.request.put.lifetime.unit =
(obsolete)srm.request.copy.lifetime =
(obsolete)srm.request.copy.lifetime.unit =
(obsolete)srm.service.pnfsmanager =
(obsolete)srm.service.pnfsmanager.timeout  =
(obsolete)srm.service.pnfsmanager.timeout.unit =
(obsolete)srm.service.spacemanager =
(obsolete)srm.service.spacemanager.timeout =
(obsolete)srm.service.spacemanager.timeout.unit =
(obsolete)srm.service.transfermanager =
(obsolete)srm.service.transfermanager.timeout =
(obsolete)srm.service.transfermanager.timeout.unit =
(obsolete)srm.service.billing =
(obsolete)srm.service.pinmanager =
(obsolete)srm.service.pinmanager.timeout =
(obsolete)srm.service.pinmanager.timeout.unit =
(obsolete)srm.service.poolmanager =
(obsolete)srm.service.poolmanager.timeout =
(obsolete)srm.service.poolmanager.timeout.unit =
(obsolete)srm.pool-monitor.topic =
(obsolete)srm.enable.recursive-directory-creation =
(obsolete)srm.enable.advisory-delete =
(obsolete)srm.enable.overwrite =
(obsolete)srm.enable.overwrite-by-default =
(obsolete)srm.limits.remove-batch-size =
(obsolete)srm.user.credentials.directory =
(obsolete)srm.limits.db.threads =
(obsolete)srm.limits.db.queue =
(obsolete)srm.protocols.disallowed.get =
(obsolete)srm.protocols.disallowed.put =
(obsolete)srm.protocols.preferred =
(obsolete)srm.protocols.tags =
(obsolete)srm.protocols.population-size =
(obsolete)srm.enable.pin-online-files =
(obsolete)srm.plugins.qos.class =
(obsolete)srm.plugins.qos.config.file =
(obsolete)srm.enable.space-reservation =
(obsolete)srm.enable.third-party.requiring-verification-by-default =
(obsolete)srm.request.maximum-client-assumed-bandwidth =
(obsolete)srm.enable.custom-get-host-by-address =
(obsolete)srm.client-transport =
(obsolete)srm.authn.vomsdir =
(obsolete)srm.cell.export = See srm.cell.consume
(obsolete)srm.net.host =
(obsolete)srm.net.local-hosts =
(obsolete)srm.root =
